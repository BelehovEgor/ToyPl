//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ToyPl/ToyPlLanguage/toyPlParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class toyPlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ASSIGN=1, TEST=2, EQ=3, NOT_EQ=4, GT=5, LW=6, GTEQ=7, LWEQ=8, UNION=9, 
		SEMI=10, LPAREN=11, RPAREN=12, SUM_OP=13, MINUS_OP=14, TIMES_OP=15, DIV_OP=16, 
		MOD_OP=17, AND_OP=18, OR_OP=19, NOT=20, INT=21, ID=22, WS=23;
	public const int
		RULE_var = 0, RULE_expr = 1, RULE_int_op = 2, RULE_cond_int_op = 3, RULE_cond_bool_op = 4, 
		RULE_cond = 5, RULE_statement = 6, RULE_program = 7;
	public static readonly string[] ruleNames = {
		"var", "expr", "int_op", "cond_int_op", "cond_bool_op", "cond", "statement", 
		"program"
	};

	private static readonly string[] _LiteralNames = {
		null, "':='", "'?'", "'='", "'/='", "'>'", "'<'", "'>='", "'<='", "'U'", 
		"';'", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'%'", "'&&'", "'||'", 
		"'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ASSIGN", "TEST", "EQ", "NOT_EQ", "GT", "LW", "GTEQ", "LWEQ", "UNION", 
		"SEMI", "LPAREN", "RPAREN", "SUM_OP", "MINUS_OP", "TIMES_OP", "DIV_OP", 
		"MOD_OP", "AND_OP", "OR_OP", "NOT", "INT", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "toyPlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static toyPlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public toyPlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public toyPlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(toyPlParser.ID, 0); }
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItoyPlParserVisitor<TResult> typedVisitor = visitor as ItoyPlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 0, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(toyPlParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(toyPlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_opContext int_op() {
			return GetRuleContext<Int_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(toyPlParser.RPAREN, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItoyPlParserVisitor<TResult> typedVisitor = visitor as ItoyPlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_expr);
		try {
			State = 26;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 18;
				var();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 19;
				Match(INT);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 20;
				Match(LPAREN);
				State = 21;
				expr();
				State = 22;
				int_op();
				State = 23;
				expr();
				State = 24;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM_OP() { return GetToken(toyPlParser.SUM_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_OP() { return GetToken(toyPlParser.MINUS_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES_OP() { return GetToken(toyPlParser.TIMES_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_OP() { return GetToken(toyPlParser.DIV_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_OP() { return GetToken(toyPlParser.MOD_OP, 0); }
		public Int_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItoyPlParserVisitor<TResult> typedVisitor = visitor as ItoyPlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Int_opContext int_op() {
		Int_opContext _localctx = new Int_opContext(Context, State);
		EnterRule(_localctx, 4, RULE_int_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 253952L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cond_int_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(toyPlParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ() { return GetToken(toyPlParser.NOT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(toyPlParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LW() { return GetToken(toyPlParser.LW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTEQ() { return GetToken(toyPlParser.GTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LWEQ() { return GetToken(toyPlParser.LWEQ, 0); }
		public Cond_int_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_int_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItoyPlParserVisitor<TResult> typedVisitor = visitor as ItoyPlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond_int_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cond_int_opContext cond_int_op() {
		Cond_int_opContext _localctx = new Cond_int_opContext(Context, State);
		EnterRule(_localctx, 6, RULE_cond_int_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 504L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cond_bool_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_OP() { return GetToken(toyPlParser.AND_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_OP() { return GetToken(toyPlParser.OR_OP, 0); }
		public Cond_bool_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_bool_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItoyPlParserVisitor<TResult> typedVisitor = visitor as ItoyPlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond_bool_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cond_bool_opContext cond_bool_op() {
		Cond_bool_opContext _localctx = new Cond_bool_opContext(Context, State);
		EnterRule(_localctx, 8, RULE_cond_bool_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			_la = TokenStream.LA(1);
			if ( !(_la==AND_OP || _la==OR_OP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(toyPlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cond_int_opContext cond_int_op() {
			return GetRuleContext<Cond_int_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(toyPlParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(toyPlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondContext[] cond() {
			return GetRuleContexts<CondContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond(int i) {
			return GetRuleContext<CondContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cond_bool_opContext cond_bool_op() {
			return GetRuleContext<Cond_bool_opContext>(0);
		}
		public CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItoyPlParserVisitor<TResult> typedVisitor = visitor as ItoyPlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondContext cond() {
		CondContext _localctx = new CondContext(Context, State);
		EnterRule(_localctx, 10, RULE_cond);
		try {
			State = 51;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 34;
				Match(LPAREN);
				State = 35;
				expr();
				State = 36;
				cond_int_op();
				State = 37;
				expr();
				State = 38;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 40;
				Match(LPAREN);
				State = 41;
				Match(NOT);
				State = 42;
				cond();
				State = 43;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 45;
				Match(LPAREN);
				State = 46;
				cond();
				State = 47;
				cond_bool_op();
				State = 48;
				cond();
				State = 49;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(toyPlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEST() { return GetToken(toyPlParser.TEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(toyPlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(toyPlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(toyPlParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(toyPlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES_OP() { return GetToken(toyPlParser.TIMES_OP, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItoyPlParserVisitor<TResult> typedVisitor = visitor as ItoyPlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		return statement(0);
	}

	private StatementContext statement(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StatementContext _localctx = new StatementContext(Context, _parentState);
		StatementContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_statement, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 54;
				var();
				State = 55;
				Match(ASSIGN);
				State = 56;
				expr();
				}
				break;
			case 2:
				{
				State = 58;
				cond();
				State = 59;
				Match(TEST);
				}
				break;
			case 3:
				{
				State = 61;
				Match(LPAREN);
				State = 62;
				statement(0);
				State = 63;
				Match(SEMI);
				State = 64;
				statement(0);
				State = 65;
				Match(RPAREN);
				}
				break;
			case 4:
				{
				State = 67;
				Match(LPAREN);
				State = 68;
				statement(0);
				State = 69;
				Match(UNION);
				State = 70;
				statement(0);
				State = 71;
				Match(RPAREN);
				}
				break;
			case 5:
				{
				State = 73;
				Match(LPAREN);
				State = 74;
				statement(0);
				State = 75;
				Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 83;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StatementContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_statement);
					State = 79;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 80;
					Match(TIMES_OP);
					}
					} 
				}
				State = 85;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItoyPlParserVisitor<TResult> typedVisitor = visitor as ItoyPlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 14, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			statement(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return statement_sempred((StatementContext)_localctx, predIndex);
		}
		return true;
	}
	private bool statement_sempred(StatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,23,89,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,27,8,1,1,2,1,2,1,3,1,3,
		1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,3,5,52,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,78,8,6,1,6,1,6,5,6,82,8,
		6,10,6,12,6,85,9,6,1,7,1,7,1,7,0,1,12,8,0,2,4,6,8,10,12,14,0,3,1,0,13,
		17,1,0,3,8,1,0,18,19,89,0,16,1,0,0,0,2,26,1,0,0,0,4,28,1,0,0,0,6,30,1,
		0,0,0,8,32,1,0,0,0,10,51,1,0,0,0,12,77,1,0,0,0,14,86,1,0,0,0,16,17,5,22,
		0,0,17,1,1,0,0,0,18,27,3,0,0,0,19,27,5,21,0,0,20,21,5,11,0,0,21,22,3,2,
		1,0,22,23,3,4,2,0,23,24,3,2,1,0,24,25,5,12,0,0,25,27,1,0,0,0,26,18,1,0,
		0,0,26,19,1,0,0,0,26,20,1,0,0,0,27,3,1,0,0,0,28,29,7,0,0,0,29,5,1,0,0,
		0,30,31,7,1,0,0,31,7,1,0,0,0,32,33,7,2,0,0,33,9,1,0,0,0,34,35,5,11,0,0,
		35,36,3,2,1,0,36,37,3,6,3,0,37,38,3,2,1,0,38,39,5,12,0,0,39,52,1,0,0,0,
		40,41,5,11,0,0,41,42,5,20,0,0,42,43,3,10,5,0,43,44,5,12,0,0,44,52,1,0,
		0,0,45,46,5,11,0,0,46,47,3,10,5,0,47,48,3,8,4,0,48,49,3,10,5,0,49,50,5,
		12,0,0,50,52,1,0,0,0,51,34,1,0,0,0,51,40,1,0,0,0,51,45,1,0,0,0,52,11,1,
		0,0,0,53,54,6,6,-1,0,54,55,3,0,0,0,55,56,5,1,0,0,56,57,3,2,1,0,57,78,1,
		0,0,0,58,59,3,10,5,0,59,60,5,2,0,0,60,78,1,0,0,0,61,62,5,11,0,0,62,63,
		3,12,6,0,63,64,5,10,0,0,64,65,3,12,6,0,65,66,5,12,0,0,66,78,1,0,0,0,67,
		68,5,11,0,0,68,69,3,12,6,0,69,70,5,9,0,0,70,71,3,12,6,0,71,72,5,12,0,0,
		72,78,1,0,0,0,73,74,5,11,0,0,74,75,3,12,6,0,75,76,5,12,0,0,76,78,1,0,0,
		0,77,53,1,0,0,0,77,58,1,0,0,0,77,61,1,0,0,0,77,67,1,0,0,0,77,73,1,0,0,
		0,78,83,1,0,0,0,79,80,10,2,0,0,80,82,5,15,0,0,81,79,1,0,0,0,82,85,1,0,
		0,0,83,81,1,0,0,0,83,84,1,0,0,0,84,13,1,0,0,0,85,83,1,0,0,0,86,87,3,12,
		6,0,87,15,1,0,0,0,4,26,51,77,83
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
